__ignore__:
    redis_manager: &REDIS-MANAGER
      key_prefix: "vumigo"
      db: 1
    riak_manager: &RIAK-MANAGER
      bucket_prefix: vumigo.
    send_to: &SEND-TO
      default:
        transport_name: "invalid broken transport"

transports:
  sms_transport:
    class: vumi.transports.telnet.AddressedTelnetServerTransport
    config:
      telnet_port: 8080
      transport_type: 'sms'
      middleware:
        - tagging_mw: vumi.middleware.tagger.TaggingMiddleware
      tagging_mw:
        incoming:
          addr_pattern: ^(.*)$
          tagpool_template: 'longcode_tagpool'
          tagname_template: \1
        outgoing:
          tagname_pattern: .*
          msg_template: {}

  ussd_transport:
    class: vumi.transports.telnet.AddressedTelnetServerTransport
    config:
      telnet_port: 8081
      transport_type: 'ussd'
      middleware:
        - tagging_mw: vumi.middleware.tagger.TaggingMiddleware
      tagging_mw:
        incoming:
          addr_pattern: ^(.*)$
          tagpool_template: 'ussd_tagpool'
          tagname_template: \1
        outgoing:
          tagname_pattern: .*
          msg_template: {}

  sms_transport_2:
    class: vumi.transports.telnet.AddressedTelnetServerTransport
    config:
      telnet_port: 8082
      transport_type: 'sms'
      middleware:
        - tagging_mw: vumi.middleware.tagger.TaggingMiddleware
      tagging_mw:
        incoming:
          addr_pattern: ^(.*)$
          tagpool_template: 'longcode_tagpool_2'
          tagname_template: \1
        outgoing:
          tagname_pattern: .*
          msg_template: {}

applications:
  wikipedia:
    class: go.apps.wikipedia.vumi_app.WikipediaApplication
    config:
      metrics_prefix: wikipedia_application
      sms_transport: wikipedia_transport
      incoming_sms_transport: wikipedia_transport
      max_sms_content_length: 450
      max_sms_unicode_length: 190
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      middleware:
        - logging_mw: vumi.middleware.logging.LoggingMiddleware

  bulk_message:
    class: go.apps.bulk_message.vumi_app.BulkMessageApplication
    config:
      metrics_prefix: bulk_message_application
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      send_to: *SEND-TO
      middleware:
        - logging_mw: vumi.middleware.logging.LoggingMiddleware

  dialogue:
    class: go.apps.dialogue.vumi_app.DialogueApplication
    config:
      env:
        NODE_PATH: "/usr/lib/node_modules"
      app_context: "{require: function(m) { if (m == 'jed' || m == 'vumigo_v01') return require(m); return null; }, Buffer: Buffer}"

      sandbox:
        config:
          cls: go.apps.dialogue.vumi_app.PollConfigResource
        outbound:
          cls: go.apps.jsbox.outbound.GoOutboundResource
        metrics:
          cls: go.apps.jsbox.metrics.MetricsResource
        http:
          cls: vumi.application.sandbox.HttpClientResource
        kv:
          cls: vumi.application.sandbox.RedisResource
          redis_manager:
            key_prefix: "vumigo.dialogue.kv"
            db: 1
          keys_per_user: 10000

      rlimits:
        RLIMIT_DATA: [67108864, 67108864] # 64 MB
        RLIMIT_STACK: [2097152, 2097152] # 2 MB
        RLIMIT_AS: [268435456, 268435456] # 256 MB

      metrics_prefix: dialogue_application
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      send_to: *SEND-TO
      middleware:
        - logging_mw: vumi.middleware.logging.LoggingMiddleware

  survey:
    class: go.apps.surveys.vumi_app.SurveyApplication
    config:
      batch_size: 2
      metrics_prefix: survey_application
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      send_to: *SEND-TO
      vxpolls:
        prefix: vxpolls
      middleware:
        - logging_mw: vumi.middleware.logging.LoggingMiddleware

  sequential_send:
    class: go.apps.sequential_send.vumi_app.SequentialSendApplication
    config:
      metrics_prefix: sequential_send_application
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      send_to: *SEND-TO

  subscription:
    class: go.apps.subscription.vumi_app.SubscriptionApplication
    config:
      metrics_prefix: subscription_application
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      send_to: *SEND-TO

  jsbox:
    class: go.apps.jsbox.vumi_app.JsBoxApplication
    config:
      metrics_prefix: "go.accounts."
      env:
        NODE_PATH: "/usr/lib/node_modules"
      app_context: "{require: function(m) { if (m == 'jed' || m == 'vumigo_v01') return require(m); return null; }, Buffer: Buffer}"

      sandbox:
        config:
          cls: go.apps.jsbox.vumi_app.ConversationConfigResource
        outbound:
          cls: go.apps.jsbox.outbound.GoOutboundResource
        metrics:
          cls: go.apps.jsbox.metrics.MetricsResource
        http:
          cls: vumi.application.sandbox.HttpClientResource
        kv:
          cls: vumi.application.sandbox.RedisResource
          redis_manager:
            key_prefix: "vumigo.jsbox.kv"
            db: 1
          keys_per_user: 10000

      rlimits:
        RLIMIT_DATA: [67108864, 67108864] # 64 MB
        RLIMIT_STACK: [2097152, 2097152] # 2 MB
        RLIMIT_AS: [268435456, 268435456] # 256 MB

      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      send_to: *SEND-TO

  opt_out:
    class: go.apps.opt_out.vumi_app.OptOutApplication
    config:
      metrics_prefix: opt_out_application
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
      send_to: *SEND-TO

  http_api:
    class: go.apps.http_api.vumi_app.StreamingHTTPWorker
    config:
      web_path: /api/v1/go/http_api/
      web_port: 8001
      metrics_prefix: http_api_application
      redis_manager: *REDIS-MANAGER
      riak_manager: *RIAK-MANAGER
